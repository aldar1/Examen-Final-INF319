/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.13
 * Generated at: 2021-12-15 09:30:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.*;

public final class resultado_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {



public interface Callable {
    public int suma(int a, int b);
    public int resta(int a, int b);
    public int multi(int a, int b);
    public int divi(int a, int b);
    public int[][] sumamat(int[][] a, int[][] b);
    public int[][] restamat(int[][] a, int[][] b);
    public int[][] multimat(int[][] a, int[][] b);
}
    
public class Calcu implements Callable {
    public int suma(int a, int b) {
    	return a+b;
    }
    public int resta(int a, int b) {
    	return a-b;
    }
    public int multi(int a, int b) {
    	return a*b;
    }
    public int divi(int a, int b) {
    	return a/b;
    }
    public int[][] sumamat(int[][] mat1, int[][] mat2)
    {
        int[][] res = new int[2][2];
        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < 2; j++)
            {
                res[i][j] = mat1[i][j] + mat2[i][j];
            }
        }
        return res;
    }
    public int[][] restamat(int[][] mat1, int[][] mat2)
    {
        int[][] res = new int[2][2];
        for (int i = 0; i < 2; i++)
        {
            for (int j = 0; j < 2; j++)
            {
                res[i][j] = mat1[i][j] - mat2[i][j];
            }
        }
        return res;
    }
    
    public int[][] multimat(int[][] mat1, int[][] mat2)
    {
        int[][] res = new int[2][2];
        int n = 2;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n; j++)
            {
                res[i][j] = 0;
                for (int k = 0; k < n; k++)
                {
                    res[i][j] += mat1[i][k] * mat2[k][j];
                }
            }
        }
        return res;
    }
}

public static int invoke(Callable callable, int a, int b, String op){
	if (op.equals("suma")) return callable.suma(a,b);
	else if (op.equals("resta")) return callable.resta(a,b);
	else if (op.equals("multi")) return callable.multi(a,b);
	return callable.divi(a,b);
}

public static int[][] mat(Callable callable, int[][] a, int[][] b, String op){
	if (op.equals("suma")) return callable.sumamat(a,b);
	else if (op.equals("resta")) return callable.restamat(a,b);
	return callable.multimat(a,b);
}

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Resultado</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<h1>Resultados</h1>\r\n");
      out.write("</body>\r\n");

if(request.getParameter("n_prim") != null){
	out.print("<h2>Primos</h2>");
	int lim,p1=1;
	lim = Integer.parseInt(request.getParameter("n_prim")); 
	while(lim!=0){
		int p2 = 0;
		for(int i=1;i<=p1;i++){
			if(p1%i==0){
				p2++;
			}
		}
		if(p2==2){
			lim--;
			out.print(p1+", ");
		}
		p1++;
	}
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 
if(request.getParameter("n_fib") != null){
	out.print("<h2>Fibonacci 4 terminos</h2>");
	int n = Integer.parseInt(request.getParameter("n_fib"));
	int a = 0;
	int b = 0;
	int c = 1;
	int d = 1;
	int f;
	if(n==1){
		out.print("0" + ", ");
	}
	else{
		if(n==2){
			out.print("0,  0"+ ", ");
		}
		else{
			if(n==3){
				out.print("0,  0,  1" + ", ");
			}
			else{
				if(n==4){
					out.print("0,  0,  1,  1" + ", ");
				}
				else{
					out.print("0,  0,  1,  1" + ", ");
					n = n-4;
					for(int i=1;i<=n;i++){
						f = a+b+c+d;
						a=b;
						b=c;
						c=d;
						d=f;
						out.print(f + ", ");
					}
				}
			}
		}
	}
}

if(request.getParameter("n_fibo") != null){
	out.print("<h2>Fibonacci 2 Terminos</h2>");
	int a, b, lim, aux;
    lim = Integer.parseInt(request.getParameter("n_fibo"));
    a = 0;
    b = 1;
    out.print("0, ");
    for (int i = 2; i <= lim; i++)
    {
        aux = a;
        a = b;
        b = aux + a;
        out.print(a + ", ");
        if (i % 10 == 0 && i != 0) out.print("<br>");
    }
}

//calculadora
else if(request.getParameter("a_calcu") != null && request.getParameter("b_calcu") != null && request.getParameter("op_calcu") != null){
	out.print("<h2>Calculadora</h2>");
	String op = request.getParameter("op_calcu");
	int a = Integer.parseInt(request.getParameter("a_calcu"));
    int b = Integer.parseInt(request.getParameter("b_calcu"));
    if(op.equals("suma") || op.equals("resta") || op.equals("multi") || op.equals("divi")){
    	out.print(op+"<br>");
    	Callable cmd = new Calcu();
        int res = invoke(cmd, a, b, op);
    	out.print(res);
    }
    else out.print("Operacion no reconocida");
}

//calculadora de matrices
else if(request.getParameter("mat100") != null && request.getParameter("mat101") != null && request.getParameter("mat110") != null &&
	request.getParameter("mat111") != null && request.getParameter("mat200") != null && request.getParameter("mat201") != null &&
	request.getParameter("mat210") != null && request.getParameter("mat211") != null && request.getParameter("op_matrices") != null){
	out.print("<h2>Calculadora de matrices</h2>");
	String op = request.getParameter("op_matrices");
	out.print(op+"<br>");
	int a = Integer.parseInt(request.getParameter("mat100"));
	int b = Integer.parseInt(request.getParameter("mat101"));
	int c = Integer.parseInt(request.getParameter("mat110"));
	int d = Integer.parseInt(request.getParameter("mat111"));
	int a1 = Integer.parseInt(request.getParameter("mat200"));
	int b1 = Integer.parseInt(request.getParameter("mat201"));
	int c1 = Integer.parseInt(request.getParameter("mat210"));
	int d1 = Integer.parseInt(request.getParameter("mat211"));

	int[][] m1 = {{a,b},{c,d}};
	int[][] m2 = {{a1,b1},{c1,d1}};
    if(op.equals("suma") || op.equals("resta") || op.equals("multi")){
    	Callable cmd = new Calcu();
        int[][] res = mat(cmd, m1, m2, op);
        for(int i=0; i<2; i++){
        	for(int j=0; j<2; j++){
        		out.print(res[i][j]+" ");
        	}
        	out.print("<br>");
        }
    }
    else out.print("Operacion no reconocida");
}




      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
